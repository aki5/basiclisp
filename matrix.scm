
(let(vector n val)
	(if (equal? n 0)
		'()
		(cons val (vector (- n 1) val))))

(let(matrix m n val)
	(if (equal? m 0)
		'()
		(cons (vector n val) (matrix (- m 1) n val))))

(let(set-matrix! mat fn)
	(let(set-vector1 vec j fn)
		(if (null? vec)
			'()
			((lambda()
				(set-car! vec (fn j))
				(set-vector1 (cdr vec) (+ j 1) fn)))))
	(let(set-matrix1 mat i fn)
		(if (null? mat)
			'()
			((lambda()
				(set-vector1 (car mat) 0 (lambda(j)(fn i j)))
				(set-matrix1 (cdr mat) (+ i 1) fn)))))
	(set-matrix1 mat 0 fn))

(let(print-matrix port mat)
	(if (null? mat)
		'()
		((lambda()
			(print port (car mat) "\n")
			(print-matrix port (cdr mat))))))

(let(next-column mat)
	(if (null? mat)
		'()
		(cons (cdr (car mat)) (next-column (cdr mat)))))

(let(column-vector mat)
	(if (null? mat)
		'()
		(cons (car (car mat)) (column-vector (cdr mat)))))

(let(transpose mat)
	(if (null? (car mat))
		'()
		(cons (column-vector mat) (transpose (next-column mat)))))

(let(multiply a b)
	(let(row-column a b)
		(if (null? a)
			'()
			(cons (* (car a) (car (car b))) (row-column (cdr a) (cdr b)))))
	(let(row-mat a b)
		(if (null? (car b))
			'()
			(cons (apply + (row-column a b)) (row-mat a (next-column b)))))
	(let(mat-mat a b)
		(if (null? a)
			'()
			(cons (row-mat (car a) b) (mat-mat (cdr a) b))))
	(mat-mat a b))


(let(transform-sum ls)
	(let(two-sum a b)
		(let sum (+ a b))
		(let tmp0 (- sum b))
		(let tmp1 (- sum tmp0))
		(let tmp2 (- a tmp0))
		(let tmp3 (- b tmp1))
		(cons sum (+ tmp2 tmp3)))
	(let(transform-sum1 ls err)
		(if (null? ls)
			(cons err '())
			((lambda()
				(let sumerr (two-sum (car ls) err))
				(let sum (car sumerr))
				(let err (cdr sumerr))
				(if (equal? err 0.0)
					(transform-sum1 (cdr ls) sum)
				(cons err (transform-sum1 (cdr ls) sum)))))))
	(transform-sum1 (cdr ls) (car ls)))
