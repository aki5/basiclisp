(define dim 10)
(define mat1 (matrix dim dim 0))
(set-matrix! mat1 (lambda(i j)(+ j (* dim i))))
(print "mat1:\n")
(print-matrix mat1)
(print "transpose mat1:\n")
(print-matrix (transpose mat1))
(print "multiply mat1 x mat1:\n")
(print-matrix (multiply (transpose mat1) mat1))


(define(forloop condfn postfn bodyfn)
	(if (condfn)
		((lambda()
			(bodyfn)
			(postfn)
			(forloop condfn postfn bodyfn)))
		'()))

(define i 0)
(forloop (lambda()(less? i 10)) (lambda()(set! i (+ 1 i))) (lambda()(print "i: " i "\n")))

(define sum '(1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 0.00000000000000000000000000000000000000000000003))
(print "sum: " sum "\n")
(define sum2 (transform-sum sum))
(print "sum2: " sum2 "\n")
(define sum3 (transform-sum sum2))
(print "sum3: " sum3 "\n")
(define sum4 (transform-sum sum3))
(print "sum4: " sum4 "\n")

(define sum '(0.00000000000000000000000000000000000000000000003 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0))
(print "sum: " sum "\n")
(define sum2 (transform-sum sum))
(print "sum2: " sum2 "\n")
(define sum3 (transform-sum sum2))
(print "sum3: " sum3 "\n")
(define sum4 (transform-sum sum3))
(print "sum4: " sum4 "\n")

(define sum '(1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0))
(print "sum: " sum "\n")
(define sum2 (transform-sum sum))
(print "sum2: " sum2 "\n")
(define sum3 (transform-sum sum2))
(print "sum3: " sum3 "\n")
(define sum4 (transform-sum sum3))
(print "sum4: " sum4 "\n")

(print "eq? aaa: " (eq? 'a 'a 'a) "\n")
(print "eq? aab: " (eq? 'a 'a 'b) "\n")

(print "apply: " (+ . (1 2 3)) "\n")

(define(argtest a b c)(+ a b c))
(print "argtest-2: " (argtest 1 2) "\n")
(print "argtest-3: " (argtest 1 2 3) "\n")

(define xx 123)
(print "x: " xx " eval x: " (eval xx) "\n")

(define(obj x)(eval x))
(set-cdr! (cdr obj) (clean-environment))
(print "clean-env: " (env-syms (clean-environment)) "\n")
(set! obj (obj '((lambda()(define zz 700)(lambda(x)(eval x))))))
(set! obj (obj '((lambda()(define zz 700)(lambda(x)(eval x))))))
(set! obj (obj '((lambda()(define ww 701)(lambda(x)(eval x))))))
(print "obj xx: " (obj 'xx) "\n")
(print "obj zz: " (obj 'zz) "\n")
(print "obj ww: " (obj 'ww) "\n")
(obj '(set! ww 702))
(print "obj ww: " (obj 'ww) "\n")
(print "obj env: " (env-syms (cddr obj)) "\n")
(print "lambda: " ((lambda()(print "ding!\n")(+ 0 1) (+ 1 2))) "\n")
(obj '(print "kellukkeet\n"))
(print "hei" "x\n")


